# -*- coding: utf-8 -*-
"""
Написать скрипт, позволяющий ввести с клавиатуры число N от 1 до 100\
и вывести на экран грамматически верную фразу вида \
«N [лет | год | года]». \
Например: «21 год», «32 года», «57 лет» и т.д. \
В случае ввода отрицательного числа выдать сообщение об ошибке.\

"""

N = int(raw_input("Введите целое число N в интервале [1;100]: "))

if N < 0:
    print "Ошибка! Вводите только положительные числа"
else:
    A = str(N)
    if N >= 10 and N <= 20:
        print A + " лет"
    elif A.endswith('1') is True:
        print A + " год"
    elif A.endswith('2') is True \
    or A.endswith('3') is True \
    or A.endswith('4') is True:
        print A + " года"
    else:
        print A + " лет"


# -*- coding: utf-8 -*-
"""
Ввести с экрана день, месяц и год (3 целых неотрицательных числа).\
Вывести на экран дату в формате dd/mm/yyyy \
(если одно из чисел однозначное, то слева дополнить одним нулем).\
В случае ввода отрицательного числа выдать сообщение об ошибке. \

"""

d = int(raw_input("Введите день: "))
m = int(raw_input("Введите месяц: "))
y = int(raw_input("Введите год: "))

if d < 0 or m < 0 or y < 0:
    print "Пожалуйста, введите положительное число"
else:
    if abs(d) < 10:
        dd = "0" + str(d)
    else:
        dd = str(d)
    if abs(m) < 10:
        mm = "0" + str(m)
    else:
        mm = str(m)
    if abs(y) < 10:
        yyyy = "0" + str(y)
    else:
        yyyy = str(y)

print dd + "/" + mm + "/" + yyyy


# -*- coding: utf-8 -*-
"""
Написать скрипт, который преобразует введенное с клавиатуры \
дробное число в денежный формат. \
Например, число 12,5 должно быть преобразовано к виду 12 руб. 50 коп. \
В случае ввода отрицательного числа \
выдать сообщение с помощью обработки исключения в коде. \

"""

N = raw_input("Введите float или double\n")

if int(N) < 0:
    raise ValueError("Введите положительное число")

A = N.partition('.')

if int(A[2]) < 10 and not A[2].startswith('0'):
    Anew = A[2] + '0'
else:
    Anew = A[2]

print str(A[0]) + " руб. " + str(Anew) + " коп."


# -*- coding: utf-8 -*-
"""
Написать скрипт для приближенного вычисления числа π \
на основе следующей формулы \
(количество слагаемых ввести с клавиатуры):\
π       1   1   1   1   1
- = 1 - - + - - - + - - - + ... \
4       3   5   7   9   11

"""

n = int(raw_input("Введите кол-во слагаемых: "))

r = range(3, n*2+1, 2)
s = 0
bol = True

for el in r:
    if bol:
        s += (1/float(el))
        bol = False
    else:
        s -= (1/float(el))
        bol = True
Pi = (1 - s) * 4

print Pi


# -*- coding: utf-8 -*-
"""
Вывести на экран все двузначные числа, сумма цифр которых делится на 7 \

"""

print [x for x in range(10, 100) if (x % 10 + x / 10) % 7 == 0]
# very cute now. thx @BumagniyPacket


# -*- coding: utf-8 -*-
"""
Написать скрипт, который предлагает ввести строку с консоли и определяет,\
начинается ли эта строка с «www». \
Если начинается, то вставить перед ней строку «http://»,\
а в конце проверить, что строка заканчивается на «.com». \
Если не заканчивается, то вставить в конец эту подстроку. \

"""

S = raw_input("Введите URL строку \n")

if S.startswith("www"):
    S = "http://" + S

    if not S.endswith(".com"):
        S += ".com"

print S


# -*- coding: utf-8 -*-
"""
Ввести с клавиатуры номер дебетовой карты (16 цифр).\
Вывести номер в скрытом виде – \
первые и последние 4 цифры отображены нормально, \
а между ними символы «*». \

"""

card = raw_input("Введите номер дебетной карты \n")

newcard = card[:4] + " **** **** " + card[-4:]

print newcard


# -*- coding: utf-8 -*-
"""
Написать скрипт, который разбивает введеное с клавиатуры \
предложение-строку на слова. \
Выбрать структуру данных для хранения слов. \
Вывести сначала слова, длина которых больше 7 символов,\
затем слова размером от 4 до 7 символов, затем – все остальные.\

"""

s = raw_input("Введите предложение:\n").split()

print [el for el in s if len(el) > 7]
print [el for el in s if 4 <= len(el) <= 7]
print [el for el in s if len(el) < 4]


# -*- coding: utf-8 -*-
"""
Сгенерировать случайным образом число N от 1 до 1000. \
Создать массив из N целых чисел,\
также сгенерированных случайным образом.\
Дополнить массив нулями до длины, равной ближайшей степени двойки. \
Например, если в массиве было N = 100 элементов,\
то дополнить массив 28 нулями, чтобы в итоге был массив из 28=128 элементов\
(ближайшая степень двойки к 100 – это число 128, для 73 – это 64 и т.д.).\

"""

import random

N = random.randint(1, 1000)
print "N = " + str(N)

a = [random.randint(1, 1000) for el in range(N)]

t = [2**el for el in range(11)]

for i in range(len(t)):
    if t[i] == N:
        break
    elif t[i] < N < t[i+1]:
        x = N - t[i]
        y = t[i+1] - N

        if x == y or x < y:
            while(len(a) > x):
                del a[-1]
        elif x > y:
            a.extend([0 for i in range(y)])
    i += 1
print a
print "a lenght = " + str(len(a))


# -*- coding: utf-8 -*-
"""
Написать скрипт, который выводит на экран TRUE, \
если элементы массива представляют собой возрастающую последовательность,\
иначе – FALSE. \

"""

a = [int(el) for el in raw_input('Введите массив: ').split()]
print 'TRUE' if a == sorted(a) else 'FALSE'
# one more thx to @BumagniyPacket


# -*- coding: utf-8 -*-
"""
Написать программу, которая позволяет ввести с клавиатуры \
натуральное число N \
и вывести на экран все комбинации натуральных чисел x, y, z, \
таких что x3+y3+z3=N. \
Если число N невозможно разложить по кубам x, y, z,\
программа должна выводить сообщение «No such combinations!».\

"""

import math

N = int(raw_input("Введите натуральное число: "))
a = []
stN = int(N ** (1/3.0)) if N > 100 else N

for x in range(1, stN):
    for y in range(1, stN):
        for z in range(1, stN):
            if x**3 + y**3 + z**3 == N:
                a.append([x, y, z])

print a if not len(a) == 0 else "No such combinations!"


# -*- coding: utf-8 -*-
"""
Модифицировать код задания 11: вывести все N от 1 до 100000\
(и соответствующие им комбинации),\
которые раскладываются минимум по 3 разным суммам кубов.\

"""

import math

i = 100001

a = []
n = {}

for N in range(1, i):
    stN = int(N ** (1 / 3.0)) if N > 99 else N

    for x in range(1, stN):
        for y in range(1, stN):
            for z in range(1, stN):
                if x**3 + y**3 + z**3 == N:
                    if N in n:
                        n[N] += [[x, y, z]]
                    else:
                        n[N] = [[x, y, z]]

if not len(n) == 0:
    nn = [str(el) + ": " + str(n[el]) for el in n if len(n[el]) >= 3]
    for el in nn:
        print el
else:
    print "No such combinations!"


# -*- coding: utf-8 -*-
"""
Ввести с клавиатуры текст предложения, завершить точкой.\
Сформировать новую строку на основе исходной,\
в которой после каждого слова в скобках указать номер слова в предложении\
(слова разделяются запятыми, пробелами или тире).\
Например, если введено «Донецк – прекрасный город», \
результирующая строка должна выглядеть так: \
«Донецк(1) – прекрасный(2) город(3)».\

"""

import re

s = raw_input("Введите предложение: ")

x = re.findall(r'[A-z]+[^\s|\.|\,|\-]', s)
i = 1
# only with kostili, but works
for el in x:
    if i is not 1:
        s = s.replace(' ' + el, ' ' + el + "(" + str(i) + ")")
    else:
        s = s.replace(el, el + "(" + str(i) + ")")

    i += 1

print s


# -*- coding: utf-8 -*-
"""
Ввести с клавиатуры текст предложения, завершить точкой. \
Вывести на консоль все символы, \
которые входят в этот текст ровно по одному разу.

"""

s = raw_input("Введите предложение: ")
ns = {}

for el in s:
    if el in ns:
        ns[el] += 1
    else:
        ns[el] = 1

print [el for el in ns if ns[el] == 1]


# -*- coding: utf-8 -*-
"""
Ввести с клавиатуры текст. \
Программно найти в нем и вывести отдельно все слова,\
которые начинаются с большого латинского символа (от A до Z)\
и заканчиваются 2 цифрами,\
например «Petr93», «Johnny70», «Service02».\
Использовать регулярные выражения. \

"""

import re

s = raw_input("Введите текст: ")

ns = re.findall(r'[A-Z]\w+[0-9]{2}\b', s)

print ns


# -*- coding: utf-8 -*-
"""
Написать скрипт, который читает текстовый файл \
и выводит символы в порядке убывания частоты встречаемости в тексте. \
Регистр символа не имеет значения. \
Программа должна учитывать только буквенные символы \
(символы пунктуации, цифры и служебные символы не подсчитывать).\
Проверить работу скрипта на нескольких файлах \
с текстом на английском и русском языках, \
сравнить результаты с таблицами, приведенными на \
wikipedia.org/wiki/Letter_frequencies. \

"""

import re

f = open('/Users/prvz/Desktop/UNIVERSITY/Python/Lab1/ex16_18.txt', 'r')
text = f.read().lower()
f.close()

dc = {}

for el in text:
    x = re.match(r'[a-z]', el)
    if x is not None:
        if el in dc:
            dc[el] += 1
        else:
            dc[el] = 1

li = list(dc.items())
li.sort(key=lambda item: item[1])

for el in li[::-1]:
    print el[0] + ": " + str(el[1])


# -*- coding: utf-8 -*-
"""
Написать скрипт, позволяющий искать в заданной директории \
и в ее подпапках файлы-дупликаты\
на основе сравнения контрольных сумм (MD5).\
Файлы могут иметь одинаковое содержимое, \
но отличаться именами. \
Скрипт должен вывести группы имен обнаруженных файлов-дупликатов.\
Ниже приведен фрагмент кода для вычисления контрольной суммы:

    import hashlib
    ...
    f = open('file.txt', 'r' )
    data = f.read()
    f.close()
    checksum = hashlib.md5(data).hexdigest()

"""

import os
import re
import hashlib as hl


def walk(dir_path, files_dict):
    for el in os.listdir(dir_path):
        path = os.path.join(dir_path, el)

        if os.path.isfile(path):
            f = open(path, 'r')
            text = f.read()
            f.close()
            checksum = hl.md5(text).hexdigest()

            if checksum in files_dict:
                files_dict[checksum] += [path]
            else:
                files_dict[checksum] = [path]
        else:
            walk(path, files_dict)

os.chdir('/Users/prvz/Desktop/UNIVERSITY/Python/Lab1/ex17/')

path = os.getcwd()
files = {}

walk(path, files)

for el in files:
    print "\n" + el + ": " + str(files[el])


# -*- coding: utf-8 -*-
"""
Написать скрипт, который позволяет \
ввести с клавиатуры имя текстового файла, \
найти в нем с помощью регулярных выражений \
все подстроки определенного вида,\
в соответствии с вариантом (приложение А).

Вариант 7:
    Найти в тексте все «смайлы» – \
    подстроки вида «:)», «:-)», «)))» \
    (количество скобок может быть любым, начиная с 1).

"""

import re

path = raw_input('Введите путь к файлу или его имя: ')

f = open(path, 'r')
ns = re.findall(r'\:\)|\:\-\)|\)+', f.read())
f.close()

ff = open(path, 'r')
i, j = 0, 1
maxi, li = len(ns), []

for line in ff:
    pos = 0
    for k in line:
        if i is not maxi:
            lnf = line.find(ns[i], pos)

            if lnf is not -1:
                if ns[i] == ':-)':
                    pos = lnf + 3
                elif ns[i] == ':)':
                    pos = lnf + 2
                else:
                    pos = lnf + 1
                li += [["String " + str(j) + ", Column " + str(lnf) + " : found '" + ns[i] + "'"]]
                i += 1
            else:
                break
        else:
            break
    j += 1

ff.close()

for el in li:
    print el
